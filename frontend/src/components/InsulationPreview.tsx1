import { useEffect, useRef, useState } from "react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { ZoomIn, ZoomOut, ScanSearch } from "lucide-react";
import { useInsulation } from "@/contexts/InsulationContext";
import * as THREE from "three";

const InsulationPreview = () => {
  const { layers } = useInsulation();
  const [materialFilter, setMaterialFilter] = useState("All Materials");
  const [zoomLevel, setZoomLevel] = useState(100);
  const mountRef = useRef<HTMLDivElement>(null);
  const sceneRef = useRef<THREE.Scene>();
  const cameraRef = useRef<THREE.PerspectiveCamera>();
  const rendererRef = useRef<THREE.WebGLRenderer>();
  const meshesRef = useRef<THREE.Mesh[]>([]);

  const increaseZoom = () => {
    if (zoomLevel < 200) setZoomLevel(zoomLevel + 25);
  };

  const decreaseZoom = () => {
    if (zoomLevel > 50) setZoomLevel(zoomLevel - 25);
  };

  const resetZoom = () => setZoomLevel(100);

  useEffect(() => {
    if (!mountRef.current) return;

    const width = mountRef.current.clientWidth;
    const height = mountRef.current.clientHeight;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);
    camera.position.set(0, 0, 300);
    camera.lookAt(0, 0, 0);

    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(width, height);
    mountRef.current.innerHTML = "";
    mountRef.current.appendChild(renderer.domElement);

    sceneRef.current = scene;
    cameraRef.current = camera;
    rendererRef.current = renderer;

    const light = new THREE.AmbientLight(0xffffff, 1);
    scene.add(light);

    return () => {
      renderer.dispose();
      mountRef.current?.removeChild(renderer.domElement);
    };
  }, []);

  useEffect(() => {
    if (!sceneRef.current || !rendererRef.current || !cameraRef.current) return;

    const scene = sceneRef.current;
    const renderer = rendererRef.current;
    const camera = cameraRef.current;

    // Clear old meshes
    meshesRef.current.forEach((mesh) => scene.remove(mesh));
    meshesRef.current = [];

    let xOffset = -50;
    const totalThickness = layers.reduce((sum, l) => sum + (parseFloat(l.thickness) || 20), 0);

    layers.forEach((layer) => {
      if (materialFilter !== "All Materials" && layer.type !== materialFilter) return;
      const thickness = parseFloat(layer.thickness) || 20;
      const width = (thickness / totalThickness) * 200;

      const geometry = new THREE.BoxGeometry(width, 40, 20);
      const material = new THREE.MeshStandardMaterial({ color: layer.color });
      const mesh = new THREE.Mesh(geometry, material);

      mesh.position.x = xOffset + width / 2;
      mesh.position.y = 0;

      scene.add(mesh);
      meshesRef.current.push(mesh);

      xOffset += width;
    });

    camera.zoom = zoomLevel / 100;
    camera.updateProjectionMatrix();

    renderer.render(scene, camera);
  }, [layers, zoomLevel, materialFilter]);

  return (
    <div className="insulation-card">
      <div className="insulation-card-header">
        <h2>Insulation Preview</h2>
        <Button variant="ghost" size="icon" className="h-6 w-6" onClick={resetZoom}>
          <ScanSearch className="h-5 w-5 text-gray-400" />
        </Button>
      </div>

      <div className="mb-4">
        <label className="block text-sm text-gray-600 mb-1">Filter Materials</label>
        <Select value={materialFilter} onValueChange={setMaterialFilter}>
          <SelectTrigger className="w-full max-w-xs">
            <SelectValue placeholder="Filter materials" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="All Materials">All Materials</SelectItem>
            <SelectItem value="Base Metal">Base Metal</SelectItem>
            <SelectItem value="Insulation">Insulation</SelectItem>
            <SelectItem value="Jacket Material">Jacket Material</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="flex flex-col items-center">
        <div className="mb-2 text-center font-medium">AMBIENT</div>
        <div
          ref={mountRef}
          className="w-full max-w-md h-40 rounded-lg border bg-gray-100 relative"
        />
        <div className="text-xs text-gray-500 mt-2 mb-2">
          <div className="flex justify-between w-full max-w-md">
            <div>650°C</div>
            <div>50°C</div>
          </div>
        </div>
      </div>

      <div className="flex justify-center items-center mt-4">
        <div className="flex items-center gap-2">
          <span className="text-sm">{zoomLevel}%</span>
          <Button onClick={increaseZoom} variant="outline" size="icon" className="rounded-full h-8 w-8 p-0 bg-app-blue text-white hover:bg-app-blue-dark border-none">
            <ZoomIn className="h-4 w-4" />
          </Button>
          <Button onClick={decreaseZoom} variant="outline" size="icon" className="rounded-full h-8 w-8 p-0 bg-app-blue text-white hover:bg-app-blue-dark border-none">
            <ZoomOut className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
};

export default InsulationPreview;